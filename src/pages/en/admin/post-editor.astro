<script>
  let editor: any = null;

  function initializeTinyMCE(): Promise<void> {
    return new Promise((resolve) => {
      const initInterval = setInterval(() => {
        if (window.tinymce && window.tinymce.get('description')) {
          editor = window.tinymce.get('description');
          clearInterval(initInterval);
          console.log('TinyMCE editor initialized');
          resolve();
        }
      }, 100);
    });
  }

  async function getTinyMCEContent(): Promise<string> {
    if (!editor) {
      await initializeTinyMCE();
    }
    return editor.getContent();
  }

  const postForm = document.getElementById('postForm');
  if (postForm) {
    postForm.addEventListener('submit', async (e) => {
      e.preventDefault();

      const typeElement = document.getElementById('type') as HTMLSelectElement;
      const titleElement = document.getElementById('title') as HTMLInputElement;
      const briefElement = document.getElementById('brief') as HTMLTextAreaElement;
      const authorElement = document.getElementById('author') as HTMLInputElement;
      const authorImageElement = document.getElementById('authorImage') as HTMLInputElement;

      if (!typeElement || !titleElement || !briefElement || !authorElement || !authorImageElement) {
        console.error('One or more form elements are missing');
        return;
      }

      const type = typeElement.value;
      const title = titleElement.value;
      const brief = briefElement.value;
      const author = authorElement.value;
      const authorImage = authorImageElement.value;

      try {
        const description = await getTinyMCEContent();

        const response = await fetch('/api/createPost', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            type,
            title,
            brief,
            author,
            authorImage,
            description,
            publish_date: new Date().toISOString(),
          }),
        });

        if (!response.ok) {
          throw new Error('Failed to publish post');
        }

        const result = await response.json();
        console.log('Post published successfully:', result);
        alert('Post published successfully!');
        // Optionally, reset the form or redirect to a new page
        // postForm.reset();
        // window.location.href = '/admin/posts';
      } catch (error) {
        console.error('Error publishing post:', error);
        alert('Error publishing post. Please try again.');
      }
    });
  } else {
    console.error('Form element not found');
  }

  const saveButton = document.getElementById('saveButton');
  if (saveButton) {
    saveButton.addEventListener('click', async () => {
      try {
        const description = await getTinyMCEContent();
        console.log('Draft content:', description);
        alert('Draft saved!');
      } catch (error) {
        console.error('Error saving draft:', error);
        alert('Error saving draft. Please try again.');
      }
    });
  } else {
    console.error('Save button not found');
  }

  // Initialize TinyMCE when the page loads
  window.addEventListener('load', () => {
    initializeTinyMCE().catch(error => {
      console.error('Error initializing TinyMCE:', error);
    });
  });

  // TypeScript declaration for tinymce on window object
  declare global {
    interface Window {
      tinymce?: any;
    }
  }
</script>