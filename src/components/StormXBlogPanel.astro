---
// StormXBlogPanel.astro
import { FiEdit2, FiTrash2 } from 'react-icons/fi';
import { fetchPosts } from '../lib/fetchPosts';

const posts = await fetchPosts();
---

<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <h1 class="text-3xl font-bold mb-6">Blog Posts</h1>
    <div class="bg-white shadow-md rounded-lg overflow-hidden">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden sm:table-cell">Author</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider hidden md:table-cell">Publish Date</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200" id="postsTableBody">
                    {posts.map((post) => (
                        <tr id={`post-row-${post.$id}`}>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="text-sm font-medium text-gray-900">{post.title}</div>
                                <div class="text-sm text-gray-500 sm:hidden">{post.author}</div>
                                <div class="text-sm text-gray-500 sm:hidden md:hidden">{new Date(post.publish_date).toLocaleDateString()}</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap hidden sm:table-cell">
                                <div class="text-sm text-gray-500">{post.author}</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap hidden md:table-cell">
                                <div class="text-sm text-gray-500">{new Date(post.publish_date).toLocaleDateString()}</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                <div class="flex items-center space-x-4">
                                    <a href={`./edit-post/${post.$id}`} class="text-indigo-600 hover:text-indigo-900">
                                        <FiEdit2 className="inline-block w-5 h-5" />
                                        <span class="sr-only">Edit</span>
                                    </a>
                                    <button class="text-red-600 hover:text-red-900 delete-post-btn" data-post-id={post.$id}>
                                        <FiTrash2 className="inline-block w-5 h-5" />
                                        <span class="sr-only">Delete</span>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    </div>
    <div class="mt-6 flex justify-end">
        <a 
            href="/en/admin/post-editor"
            class="py-2 px-4 bg-black hover:bg-gray-800 text-white font-semibold rounded-md transition duration-300 ease-in-out"
        >
            Create Post
        </a>
    </div>
</div>

<script>
    function deletePost(documentId: string): void {
        if (confirm('Are you sure you want to delete this post?')) {
            fetch('/api/deletePost', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ documentId }),
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(result => {
                if (result.success) {
                    const postRow = document.getElementById(`post-row-${documentId}`);
                    if (postRow) {
                        postRow.remove();
                    }
                    alert('Post deleted successfully');
                } else {
                    throw new Error(result.error || 'Failed to delete post');
                }
            })
            .catch(error => {
                console.error('Error deleting post:', error);
                alert(`Failed to delete post. Error: ${error instanceof Error ? error.message : String(error)}`);
            });
        }
    }

    function setupDeleteButtons(): void {
        const deleteButtons = document.querySelectorAll('.delete-post-btn');
        deleteButtons.forEach(button => {
            button.addEventListener('click', (event: Event) => {
                const target = event.currentTarget as HTMLElement;
                const postId = target.getAttribute('data-post-id');
                if (postId) {
                    deletePost(postId);
                } else {
                    console.error('Post ID not found');
                }
            });
        });
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', setupDeleteButtons);
    } else {
        setupDeleteButtons();
    }
</script>